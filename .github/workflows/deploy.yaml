name: Build and Deploy Blog
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ gh-pages ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Dependencies
        run: |
          npm install gray-matter
          npm install reading-time
          npm install marked
          npm install prismjs
          npm install node-fetch

      - name: Fetch Author Info
        run: |
          cat << 'EOF' > scripts/fetch-author.js
          const fetch = require('node-fetch');
          const fs = require('fs');

          async function fetchGithubProfile() {
            const username = process.env.GITHUB_REPOSITORY.split('/')[0];
            const response = await fetch(`https://api.github.com/users/${username}`);
            const data = await response.json();
            
            const author = {
              name: data.name || username,
              avatar: data.avatar_url,
              bio: data.bio,
              location: data.location,
              github: data.html_url,
              blog: data.blog,
              followers: data.followers
            };
            
            fs.writeFileSync('docs/author.json', JSON.stringify(author, null, 2));
          }

          fetchGithubProfile().catch(console.error);
          EOF

      - name: Generate Posts Index
        run: |
          cat << 'EOF' > scripts/generate-index.js
          const fs = require('fs');
          const path = require('path');
          const matter = require('gray-matter');
          const readingTime = require('reading-time');
          const { marked } = require('marked');
          const Prism = require('prismjs');
          require('prismjs/components/prism-typescript');
          require('prismjs/components/prism-javascript');
          require('prismjs/components/prism-python');
          require('prismjs/components/prism-go');
          require('prismjs/components/prism-bash');
          require('prismjs/components/prism-json');

          // Configure marked to use Prism for syntax highlighting
          marked.setOptions({
            highlight: function(code, lang) {
              if (Prism.languages[lang]) {
                return Prism.highlight(code, Prism.languages[lang], lang);
              }
              return code;
            }
          });

          const POSTS_DIR = 'docs/posts';
          const OUTPUT_FILE = 'docs/posts.json';
          
          function getAllPosts() {
            const posts = [];
            const files = fs.readdirSync(POSTS_DIR);
            
            files.forEach(filename => {
              if (!filename.endsWith('.md') && !filename.endsWith('.mdx')) return;
              
              const filePath = path.join(POSTS_DIR, filename);
              const content = fs.readFileSync(filePath, 'utf-8');
              const { data, content: markdown } = matter(content);
              
              // Generate reading time
              const readTime = readingTime(markdown);
              
              // Convert markdown to HTML with syntax highlighting
              const html = marked(markdown);
              
              posts.push({
                title: data.title,
                date: data.date,
                tags: data.tags || [],
                path: `/posts/${filename}`,
                excerpt: data.excerpt || markdown.slice(0, 200) + '...',
                readingTime: readTime.text,
                content: html,
                lastModified: fs.statSync(filePath).mtime.toISOString()
              });
            });
            
            return posts.sort((a, b) => new Date(b.date) - new Date(a.date));
          }
          
          const posts = getAllPosts();
          fs.writeFileSync(OUTPUT_FILE, JSON.stringify(posts, null, 2));
          
          // Generate tags summary
          const tags = new Set();
          posts.forEach(post => post.tags.forEach(tag => tags.add(tag)));
          fs.writeFileSync('docs/tags.json', JSON.stringify(Array.from(tags), null, 2));
          EOF
          
          mkdir -p scripts
          node scripts/fetch-author.js
          node scripts/generate-index.js

      - name: Deploy to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          branch: gh-pages
          folder: docs